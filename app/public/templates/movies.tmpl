

<div ng-app="movieApp">
	<div ng-controller="movieController">
		<label for="name">Movie Name:</label>
		<input type="text" name="name" ng-model="movie.name"> 
		<p>Your search: {{movie.name }}</p>
		<button id="search">Search</button>

			<table class="movies">
				<tr>
					<th>Movie Title</th>
					<th>Release Date</th>
					<th>Popularity</th>
					<th>Vote Average</th>
					<th>Votes</th>
				<tr ng-repeat="movie in movies | orderBy: 'popularity' : reverse=true" ng-click="movieDetails(movie.id)" data-id="{{movie.id}}">
					<td>{{movie.original_title}}</td>
					<td>{{movie.release_date}}</td>
					<td>{{movie.popularity}}</td>
					<td>{{movie.vote_average}}</td>
					<td>{{movie.vote_count}}</td>
				</tr>
			</table>
			Actors:
			<div ng-repeat="actor in cast">
					<p>Character: {{actor.character}}</p>
					<p>Actor: {{actor.name}}</p>
					<p><a href="http://themoviedb.org/person/{{actor.id}}">Link</a></p>

			</div>
		
	</div>
</div>
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="/js/angular.js"></script>
<script src="/js/angular-route.js"></script> <!-- old angular routing was deprecated in 1.2, added as sep module -->
<script>

	var developerKey = "6f94caa6ae73a84da6f7657b8c2089a8";

	var movieApp = angular.module("movieApp",[]);//module (app)

	movieApp.controller("movieController", function($scope,movieFactory){//controllers //include scope and factories/services/etc as 
		$scope.movie = {name:''};
		$("#search").click(function(){
			 movieFactory.getMovies($scope.movie)
			 	.then(function(data){
			 		$scope.movies = data.results;
			 		// console.log($scope.movies);//moviedb returns json 'results' object with movies
			 	});
			 });
		$scope.movieDetails = function(id){
			movieFactory.getMovieCredits(id)
				.then(function(data){
					$scope.cast = data.cast;
				});
		}

	});

	movieApp.factory('movieFactory', ['$http','$q', function($http,$q){ //inject http (list as param $http) if you want to make .get call here; use aliases; q is for promise (then)
		//if this were a service, use this keyword

		var url = "http://api.themoviedb.org/3/search/movie?api_key=" + developerKey + "&query=";
		var movieCredits = "http://api.themoviedb.org/3/movie/";

		var factory = {};
		factory.getMovies=function(movie){
			// console.log(movie.name); //movie passed to getMovies
			var deferred = $q.defer();
			var movies =[];
			$http.get(url+movie.name).success(function(data, status, headers, config){
				deferred.resolve(data);
				// console.log(data);
			}).error(function (data, status, headers, config) {
               deferred.reject(data);
           });
			
			return deferred.promise;
		};
		

		factory.getMovieCredits=function(movieID){
			var deferred = $q.defer();
			var id = movieID
			$http.get(movieCredits+movieID+"/credits?api_key="+developerKey).success(function(data,status,headers,config){
				deferred.resolve(data);
			}).error(function(data,status,headers,config){
				deferred.reject(data);
			});

			return deferred.promise;
		};
		return factory;
	}]);



</script>